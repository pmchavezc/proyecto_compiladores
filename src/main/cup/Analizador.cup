package org.example;

import java_cup.runtime.*;

parser code {:
    private java.io.PrintWriter outWriter;
    private java.io.PrintWriter errWriter;

    public parser(java_cup.runtime.Scanner s, java.io.PrintWriter out, java.io.PrintWriter err) {
        this(s);
        this.outWriter = out;
        this.errWriter = err;
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error sintáctico");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.left >= 0) m.append(" en línea ").append(s.left + 1);
            if (s.right >= 0) m.append(", columna ").append(s.right + 1);
            if (s.value != null) {
                m.append(": '").append(s.value).append("'");
            }
        }
        m.append(" : ").append(message);
        if (errWriter != null) errWriter.println(m); else System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Error fatal: " + message);
    }

    public void report_program_recognized() {
        if (outWriter != null) outWriter.println("Análisis completado: Programa reconocido correctamente.");
        else System.out.println("Análisis completado: Programa reconocido correctamente.");
    }
:};

/* Terminales */
terminal DEFINE, FUNCTION, RETURN, IF, ELSE, ELSEIF, WHILE, LOOP, END, THEN, DO, PRINT;
terminal PUNTO_Y_COMA, COMA, PARENTESIS_IZQ, PARENTESIS_DER, LLAVE_IZQ, LLAVE_DER, ASIGNACION;
terminal MAS, MENOS, MULTIPLICACION, DIVISION;
terminal IGUAL_IGUAL, DIFERENTE, MAYOR_IGUAL, MENOR_IGUAL, MAYOR, MENOR;
terminal Y_LOGICO, O_LOGICO, NEGACION;
terminal Integer NUMERO;
terminal Float FLOTANTE;
terminal String CADENA;
terminal String IDENTIFICADOR;
terminal TRUE, FALSE;
terminal TYPE_INT, TYPE_BOOLEAN, TYPE_FLOAT, TYPE_STRING;

/* No terminales */
non terminal program;
non terminal statement;
non terminal statementList;
non terminal expr;
non terminal functionDef;
non terminal exprList;
non terminal paramList;
non terminal paramListOpt;
non terminal elseIfList;
non terminal elsePart;
non terminal block;
non terminal type;
non terminal varDeclaration;

/* Precedencia y asociatividad */
precedence left O_LOGICO;
precedence left Y_LOGICO;
precedence left IGUAL_IGUAL, DIFERENTE;
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION;
precedence right NEGACION;

start with program;

program ::= statementList:s {: parser.report_program_recognized(); :} ;

statementList ::= statementList:s statement:st
                | statement:st
                ;

statement ::= varDeclaration
            | functionDef
            | IF expr:cond THEN statementList:ifBody elseIfList:elseIfs elsePart:elseP END
            | WHILE expr:cond DO statementList:loopBody END
            | PRINT exprList:printItems PUNTO_Y_COMA
            | block
            | RETURN expr:e PUNTO_Y_COMA
            | LOOP statementList:loopBody END
            | DEFINE IDENTIFICADOR:id ASIGNACION expr:e PUNTO_Y_COMA
            ;

varDeclaration ::= type:t IDENTIFICADOR:id PUNTO_Y_COMA
                 | type:t IDENTIFICADOR:id ASIGNACION expr:e PUNTO_Y_COMA
                 ;

type ::= TYPE_INT
       | TYPE_BOOLEAN
       | TYPE_FLOAT
       | TYPE_STRING
       ;

block ::= LLAVE_IZQ statementList:body LLAVE_DER;

elseIfList ::= elseIfList:list ELSEIF expr:cond THEN statementList:body
              | /* vacío */
              ;

elsePart ::= ELSE statementList:body
            | /* vacío */
            ;

functionDef ::= FUNCTION IDENTIFICADOR:id PARENTESIS_IZQ paramListOpt:params PARENTESIS_DER block:body END;

paramListOpt ::= paramList:p
                | /* vacío */
                ;

paramList ::= IDENTIFICADOR:id
            {: RESULT = id; :}
            | paramList:list COMA IDENTIFICADOR:id
            {: RESULT = list + ", " + id; :}
            ;

exprList ::= expr:e
            | exprList:list COMA expr:e
            ;

expr ::= IDENTIFICADOR:id         {: RESULT = id; :}
       | NUMERO:n                 {: RESULT = n.toString(); :}
       | FLOTANTE:f               {: RESULT = f.toString(); :}
       | TRUE                     {: RESULT = "TRUE"; :}
       | FALSE                    {: RESULT = "FALSE"; :}
       | CADENA:s                 {: RESULT = "\"" + s + "\""; :}
       | PARENTESIS_IZQ expr:e PARENTESIS_DER     {: RESULT = e; :}
       | expr:e1 MAS expr:e2      {: RESULT = "(" + e1 + " + " + e2 + ")"; :}
       | expr:e1 MENOS expr:e2    {: RESULT = "(" + e1 + " - " + e2 + ")"; :}
       | expr:e1 MULTIPLICACION expr:e2 {: RESULT = "(" + e1 + " * " + e2 + ")"; :}
       | expr:e1 DIVISION expr:e2 {: RESULT = "(" + e1 + " / " + e2 + ")"; :}
       | expr:e1 IGUAL_IGUAL expr:e2 {: RESULT = "(" + e1 + " == " + e2 + ")"; :}
       | expr:e1 DIFERENTE expr:e2 {: RESULT = "(" + e1 + " != " + e2 + ")"; :}
       | expr:e1 MENOR expr:e2    {: RESULT = "(" + e1 + " < " + e2 + ")"; :}
       | expr:e1 MAYOR expr:e2    {: RESULT = "(" + e1 + " > " + e2 + ")"; :}
       | expr:e1 MENOR_IGUAL expr:e2 {: RESULT = "(" + e1 + " <= " + e2 + ")"; :}
       | expr:e1 MAYOR_IGUAL expr:e2 {: RESULT = "(" + e1 + " >= " + e2 + ")"; :}
       | expr:e1 Y_LOGICO expr:e2 {: RESULT = "(" + e1 + " && " + e2 + ")"; :}
       | expr:e1 O_LOGICO expr:e2 {: RESULT = "(" + e1 + " || " + e2 + ")"; :}
       | NEGACION expr:e          {: RESULT = "!" + e; :}
       ;